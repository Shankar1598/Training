Day 3:

1.
Compute the nearest larger number by interchanging its digits updated.Given 2 numbers a and b find the smallest number greater than b by interchanging the digits of a and if not possible print -1.

Input Format
2 numbers a and b, separated by space.
Output Format
A single number greater than b.
If not possible, print -1

Constraints
1 <= a,b <= 10000000

Output:
Enter the 1st number :459
Enter the 2nd number :500
549

Algorithm
Step 1:- Start.
Step 2:- From itertools import permutation function.
Step 3:- Take user inputs.
Step 4:- Initialize a flag variable to 0[zero].
Step 5:- Convert number1 to String and then to a list.
Step 6:- Sort the list by using the sorted function.
Step 7:- Initialize a perm variable that stores the permutations of the list.
Step 8:- Iterate through the perm variable by converting it to the list.
Step 9:- Initialize an empty string.
Step 10:- Concatenate all the iterators to a string variable.
Step 11:- Typecast the string variable to an integer to check the next greatest number.
Step 12:- Continue the process until if condition gets the True value.
Step 13:- As the if condition gets the true value, chang the flag variable to 1 and break the loop.
Step 14:- Check the flag whether we got the greatest value or not.
Step 15:- Print the string variable if flag is 1 else print -1.
Step 16:- End.

Solution:
#import itertools to get permutation function
from itertools import permutations
#take inputs
num1 = int(input('Enter the 1st number :'))
num2 = int(input('Enter the 2nd number :'))
#initialize a flag variable
flag = 0
#convert num1 to string list
num1 = list(str(num1))
#sort the list
num1 = sorted(num1)
#find all permutations
perm = permutations(num1) 
#iterate through all permutations 
for i in list(perm): 
    #initialize an string
    string = " "
    #iterate through an string
    for j in i:
        string+=j
    #typecast string to integer
    #check for next greater value
    if int(string) > num2:
        #if True Change the flag variable 
        #break the loop
        flag = 1
        break
#check if the number is found or not
if flag == 1:
    print(string)
else:
    print(-1)


2.
Write the code for the following input value using 
Knapsack algorithm

Knapsack input:

items = [
  {'val': 150, 'wt': 20},
  {'val': 100, 'wt': 20},
  {'val': 120, 'wt': 30}
]
W = 50
Output:
270

Algorithm: Has been discussed in class

Solution:

def knapSack(W, items, n):

  if (n == 0 or W==0):
    return 0
  
  itemValue = items[n-1]['val']
  itemWt = items[n-1]['wt']

  if (itemWt > W):
    return knapSack(W, items, n-1)
  else:
    # include nth item
    included = (itemValue + knapSack(W-itemWt, items, n-1))
    # exclude nth item
    excluded = knapSack(W, items, n-1)

    result = max(included, excluded)
    return result

Day 4:

1.
A knight is placed on the first block of an empty board and, moving according to the rules of chess, must visit each square exactly once.

Output:
59,14,63,32,1,16,19,34
62,31,60,15,56,33,2,17
13,58,55,64,49,18,35,20
30,61,42,57,54,51,40,3
43,12,53,50,41,48,21,36
26,29,44,47,52,39,4,7
11,46,27,24,9,6,37,22
28,25,10,45,38,23,8,5


2.

Given a valid sentence without any spaces between the words and a dictionary of valid English words, find all possible ways to break the sentence in individual dictionary words.

dictionary: { i, like, sam, sung, samsung, mobile, ice, cream, icecream, man, go, mango}

Input: "ilikesamsungmobile"
Output: i like sam sung mobile
        i like samsung mobile

Input: "ilikeicecreamandmango"
Output: i like ice cream and man go
        i like ice cream and mango
        i like icecream and man go
        i like icecream and mango

