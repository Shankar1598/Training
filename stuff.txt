md5 collision probability 4.3*10 -60


Assignment:
Day 9:

1. Linus is on the process of creating an open source Operating System that can run in almost any kind of hardware efficiently. Be it any piece of hardware with any kind of processing, the amount of memory (RAM) that's available on it will be finite. For the OS to run efficiently, it has to get the most out of the available resources.

For a process to run smoothly, the OS has to load all its data into the main memory. But what happens when we run out of space in the RAM. In that case we have to move the data of some other process into a separate location and make space for the new one. Linus wants to keep all the recently used process and remove the least recently used out of the memory. Assuming all the processes have the same amount of data, help Linus by building a memory management system that has the following methods.

get(key) -> returns the value stored on the RAM, if available. If not return -1

put(key, value) -> load the value into the memory

the system should be be initialized with the capacity it has

Example:
ram = LRUMemory(2)
ram.put(1, 1)
ram.put(2, 2)
print(ram.get(1))       # returns 1
ram.put(3, 3)    # evicts key 2
print(ram.get(2))       # returns -1 (not found)
ram.put(4, 4)    # evicts key 1
print(ram.get(1))       # returns -1 (not found)
print(ram.get(3))       # returns 3
print(ram.get(4))       # returns 4

2. Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1]

Day 3:
- Given a text txt[0..n-1] and a pattern pat[0..m-1], write a function search(char pat[], char txt[]) that prints all occurrences of pat[] in txt[]. You may assume that n > m.
  - solve using normal method and "Rabin-Karp" and notice the speed difference using large inputs.

- Given two arrays A[] and B[] of length N, the task is to find the minimum number of operations in which the array A can be converted into array B where each operation consists of adding an integer K into a subarray from L to R.
Examples:
  A[] = {3, 7, 1, 4, 1, 2}, B[] = {3, 7, 3, 6, 3, 2}
  Explanation:
  In the above given example only one operation is required to convert from A to B: L = 3, R = 5 and K = 2
  Array after the following operation:
  Index 0: A[0] = 3, B[0] = 3
  Index 1: A[1] = 7, B[1] = 7
  Index 2: A[2] = 1 + 2 = 3, B[2] = 3
  Index 3: A[3] = 4 + 2 = 6, B[3] = 6
  Index 4: A[4] = 1 + 2 = 3, B[4] = 3
  Index 5: A[5] = 2, B[5] = 2
  Input: A[] = {1, 1, 1, 1, 1}, B[] = {1, 2, 1, 3, 1}
  Output: 2
  Explanation:
  In the above given example only one operation is required to convert from A to B â€“
  Operation 1: Add 1 to L = 2 to R = 2
  Operation 2: Add 2 to L = 4 to R = 4






Day 2:
1. Subset sum problem is to find subset of elements that are selected from a given set whose sum adds up to a given number K. We are considering the set contains non-negative values. It is assumed that the input set is unique (no duplicates are presented).
Inputs:
weights = {15, 22, 14, 26, 32, 9, 16, 8}; target = 53;

2. Generating n bit Gray Codes
Given a number n, the task is to generate n bit Gray codes (generate bit patterns from 0 to 2^n-1 such that successive patterns differ by one bit)
Examples:
Input : 2 
Output : 0 1 3 2
Explanation : 
00 - 0
01 - 1
11 - 3
10 - 2

Input : 3 
Output : 0 1 3 2 6 7 5 4


Day 1:
- Optimize the isEmpty method
- bring support to multi-digit numbers for the compiler
- get int values of variables from memory

- postfix to Infix conversion
- infix to prefix
- return the item ids instead of values in knapsack